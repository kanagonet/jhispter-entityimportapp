package com.naline.entities.domain;

import static com.naline.entities.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShoppingCartAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAllPropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertShoppingCartAutoGeneratedPropertiesEquals(expected, actual);
        assertShoppingCartAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAllUpdatablePropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertShoppingCartUpdatableFieldsEquals(expected, actual);
        assertShoppingCartUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartAutoGeneratedPropertiesEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(actual)
            .as("Verify ShoppingCart auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartUpdatableFieldsEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(actual)
            .as("Verify ShoppingCart relevant properties")
            .satisfies(a -> assertThat(a.getPlacedDate()).as("check placedDate").isEqualTo(expected.getPlacedDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getTotalPrice())
                    .as("check totalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPrice())
            )
            .satisfies(a -> assertThat(a.getPaymentMethod()).as("check paymentMethod").isEqualTo(expected.getPaymentMethod()))
            .satisfies(a -> assertThat(a.getPaymentReference()).as("check paymentReference").isEqualTo(expected.getPaymentReference()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingCartUpdatableRelationshipsEquals(ShoppingCart expected, ShoppingCart actual) {
        assertThat(actual)
            .as("Verify ShoppingCart relationships")
            .satisfies(a -> assertThat(a.getCustomerDetails()).as("check customerDetails").isEqualTo(expected.getCustomerDetails()));
    }
}
