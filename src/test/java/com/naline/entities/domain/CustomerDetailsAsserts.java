package com.naline.entities.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerDetailsAllPropertiesEquals(CustomerDetails expected, CustomerDetails actual) {
        assertCustomerDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerDetailsAllUpdatablePropertiesEquals(CustomerDetails expected, CustomerDetails actual) {
        assertCustomerDetailsUpdatableFieldsEquals(expected, actual);
        assertCustomerDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerDetailsAutoGeneratedPropertiesEquals(CustomerDetails expected, CustomerDetails actual) {
        assertThat(actual)
            .as("Verify CustomerDetails auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerDetailsUpdatableFieldsEquals(CustomerDetails expected, CustomerDetails actual) {
        assertThat(actual)
            .as("Verify CustomerDetails relevant properties")
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getAddressLine1()).as("check addressLine1").isEqualTo(expected.getAddressLine1()))
            .satisfies(a -> assertThat(a.getAddressLine2()).as("check addressLine2").isEqualTo(expected.getAddressLine2()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerDetailsUpdatableRelationshipsEquals(CustomerDetails expected, CustomerDetails actual) {
        // empty method
    }
}
